'''
@author:lvming
@time:2021/6/22
'''
'''
什么是自动化测试：
讲手工执行的部分测试行为转换为机器可以识别的语言，从而，交由机器来实现测试的行为，叫做自动化测试
1.自动化性能测试：（性能测试）
Jmeter，LR，Locust
2.自动化功能测试：（自动化测试）
工具：
RobotFramework，AirTest，Playwright，
SeleniumIDE(新版)，Cypress(弃了吧)，HTTPRUNNER(太老了)
应用层：
Selenium为核心。
Python：Selenium+WebDriver、Appium、Requests
Java：Selenium+WebDriver、Appium、HTTPClient
自动化测试开发这个岗位的定义？
大众认为做测试平台是测开，做测试框架是自动化测试
测试开发本质是测试工作。不是开发工作。
测试平台与测试框架的区别在哪里？
测试平台：前端+后端，web系统为主体存在的架构体系
	测试平台本质意义是web系统的开发，不是为了测试服务的。
	前端HTML+vue，后端Python+Django，数据库Mysql，基于HTTP协议进行数据通信。
	核心业务处理就是关键字驱动的体系。
测试框架：纯后端开发为主体的架构体系，一般在服务端部署为主。
	测试框架是服务的开发，是专门为测试服务的。
	自动化测试就是专门为了部分业务来实现的。而不是全链路。
	如果自动化是为了全链路负责的，那么你们早就失业了。
	自动化测试主要是为了核心业务来实现的。目的是为了提升测试效率，降低重复固化工作的操作行为。
自动化测试的分层：
   UI层：包含WebUI和AppUI，除非必要，最好不要做APP自动化。非要做App自动化，建议通过工具的形式走会更方便一些。
         实现UI系统交互的自动化测试，主要用于核心业务流的自动化测试行为。
          应用在回归测试阶段。对固话的流程通过自动化进行回归，提升测试效率。本质意义上就是一种测试手段。一般而言UI自动化覆盖率在40%-60%之间。覆盖率就是自动化测试所覆盖的内容，占据整个系统的多少比重。比重的高低都是基于测试框架本身的设计行为所一算出来的。所以说自动化测试的技术最核心的点是测试框架的设计能力。
   Service层：集成测试阶段，主体是数据的交互。所以应用接口自动化测试技术来实现。主要用在后端的接口联调以及回归测试阶段。可以极大的提速测试的效率。目前应用最为广泛的自动化测试阶段。因为接口本身的变动会比较低。
   Unit层：单元测试层级，目前大家不需要考虑的层级。
   单元测试的手法主要讲究的是覆盖率。条件覆盖，逻辑覆盖。每一行代码至少执行一次，单元测试的核心思想。就是一个苦力活。除非是嵌入式的单元测试。用c语言实现的。国内目前单元测试主体是开发人员自己完成。
自动化测试的介入：
   自动化测试在企业中的应用：
	绝对不是线性代码的形态应用。以代码与数据分离的形态来实现的自动化。主流的自动化测试设计模式就是关键是驱动和POM。
	如果是工具实现的自动化测试，对于个人的提升是非常有限的。建议在课程后半段将编程自动化逐步渗入到公司的，进行推行和练手。
	搭建自动化测试阶段：
	   1.选择项目。提取自动化测试实现的内容。
	   2.结合项目实际情况，进行自动化测试框架的设计和选型
	   3.自动化测试框架的研发。
	   4.进行试点的测试执行。
	   5.会议讲解。
	   6.开始推行，同步生成规范化操作文档。
	   这套流程一定要有一个大佬支持你。
	UI自动化测试介入一般都是在回归测试阶段。结合自动化测试用例在
回归阶段将提取的测试流程全部基于自动化测试来实现。
	接口：
	   1.后端实现后，提前介入做后端测试。
	   2.回归测试阶段下，做后端服务的稳定性测试。
自动化会关联到持续集成来实现执行。(testops)
   1.定时任务的执行。为了确保系统的长期稳定性
   2.构建完整的自动化测试流。
   3.大部分公司自动化测试都需要关联持续集成来落地。
UI自动化在早期很难推动执行，是因为UI界面的变动过于频繁，维护元素定位需要大量的时间。做UI自动化一般而言都是挑选稳定的系统来实现。
   其实这种情况只需要考虑一个良好的设计模式即可极大程度的解决。
接口主流是关键字驱动，UI是关键字驱动或者POM
Chrome开发者工具：
   目前chrome是主流的浏览器。通过F12启动。右键-检查。
  开发者工具在使用的时候一定设置为弹出窗的形式进行操作。
   chrome浏览器一定要设置为不可以更新。
   没有chrome服务，因为你没有装在默认路径，或者装的山寨chrome
   在学习初期，所有的软件在安装的时候，依照老师的说明，可以变动路径的就变动，不可以的就安装在默认路径。
   优先学习的是技术的实现而不是环境的搭建。

'''